import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

class MobiusStrip:
    def __init__(self, R=1.0, w=0.2, n=100):
        self.R = R          # Radius
        self.w = w          # Width
        self.n = n          # Resolution
        self.u, self.v = np.meshgrid(
            np.linspace(0, 2 * np.pi, n),
            np.linspace(-w / 2, w / 2, n)
        )
        self.x, self.y, self.z = self._compute_coordinates()

    def _compute_coordinates(self):
        """
        Parametric equations of the Möbius strip.
        """
        u, v = self.u, self.v
        half_u = u / 2
        x = (self.R + v * np.cos(half_u)) * np.cos(u)
        y = (self.R + v * np.cos(half_u)) * np.sin(u)
        z = v * np.sin(half_u)
        return x, y, z

    def compute_surface_area(self):
        """
        Approximate surface area using numerical integration.
        A = ∫∫ |∂r/∂u × ∂r/∂v| du dv
        """
        du = 2 * np.pi / (self.n - 1)
        dv = self.w / (self.n - 1)

        # Partial derivatives
        x_u, x_v = np.gradient(self.x, du, dv, edge_order=2)
        y_u, y_v = np.gradient(self.y, du, dv, edge_order=2)
        z_u, z_v = np.gradient(self.z, du, dv, edge_order=2)

        # Cross product of partial derivatives
        cross_x = y_u * z_v - z_u * y_v
        cross_y = z_u * x_v - x_u * z_v
        cross_z = x_u * y_v - y_u * x_v

        # Magnitude of cross product
        dA = np.sqrt(cross_x**2 + cross_y**2 + cross_z**2)

        # Surface area approximation
        area = np.sum(dA) * du * dv
        return area

    def compute_edge_length(self):
        """
        Approximate edge length by summing distances between successive points along the boundary (v = ±w/2).
        """
        u_vals = np.linspace(0, 2 * np.pi, self.n)
        v_val = self.w / 2

        def edge_coords(v_sign=1):
            u = u_vals
            v = v_sign * v_val
            x = (self.R + v * np.cos(u / 2)) * np.cos(u)
            y = (self.R + v * np.cos(u / 2)) * np.sin(u)
            z = v * np.sin(u / 2)
            return np.stack([x, y, z], axis=1)

        edge1 = edge_coords(1)
        edge2 = edge_coords(-1)

        def path_length(points):
            return np.sum(np.linalg.norm(np.diff(points, axis=0), axis=1))

        return path_length(edge1) + path_length(edge2)

    def plot(self):
        """
        3D plot of the Möbius strip.
        """
        fig = plt.figure(figsize=(10, 7))
        ax = fig.add_subplot(111, projection='3d')
        ax.plot_surface(self.x, self.y, self.z, cmap='plasma', edgecolor='k', alpha=0.9)
        ax.set_title("Möbius Strip")
        ax.set_xlabel("X")
        ax.set_ylabel("Y")
        ax.set_zlabel("Z")
        plt.tight_layout()
        plt.show()

# Example usage
if __name__ == "__main__":
    mobius = MobiusStrip(R=1.0, w=0.3, n=200)
    area = mobius.compute_surface_area()
    edge_len = mobius.compute_edge_length()

    print(f"Approximated Surface Area: {area:.4f}")
    print(f"Approximated Edge Length: {edge_len:.4f}")

    mobius.plot()
